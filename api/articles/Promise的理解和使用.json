{"title":"Promise","uid":"b468f3c3ac71ea2b71e5a5059fe38476","slug":"Promise的理解和使用","date":"2022-05-15T12:46:25.000Z","updated":"2022-08-21T15:40:36.953Z","comments":true,"path":"api/articles/Promise的理解和使用.json","keywords":null,"cover":"static\\img\\photo-1571361656693-d7602246ce3c.jpg","content":"<h2 id=\"Promise的理解和使用\"><a href=\"#Promise的理解和使用\" class=\"headerlink\" title=\"Promise的理解和使用\"></a>Promise的理解和使用</h2><ul>\n<li>promise是一门新的技术(es6规范)</li>\n<li>promise是异步编程的新解决方案</li>\n<li>从语法上来说:promise是一个构造函数</li>\n<li>从功能上来说:promise对象用来封装异步操作并可以获取成功和失败的结果</li>\n<li>promise: 启动异步任务 &#x3D;&gt; 返回promise对象 &#x3D;&gt; 给promise对象绑定回调函数</li>\n</ul>\n<h4 id=\"promise的优点\"><a href=\"#promise的优点\" class=\"headerlink\" title=\"promise的优点\"></a>promise的优点</h4><p>支持链式调用,可以解决回调地狱问题</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>什么是回调地狱？</p>\n<p>回调函数嵌套调用,外部回调函数异步执行的结果是嵌套的回调执行条件</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>回调地狱的缺点？</p>\n<p>不便于阅读</p>\n<p>不便于异常处理</p></blockquote>\n<hr>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;\n  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;\n  &lt;title&gt;Document&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n  &lt;div class&#x3D;&quot;container&quot;&gt;\n    &lt;button class&#x3D;&quot;btn&quot; id&#x3D;&quot;btn&quot;&gt;点击抽奖&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;script&gt;\n  function rand(m,n) &#123;\n    return Math.ceil(Math.random()*(n-m+1)) + m+1\n  &#125;\n  let btn &#x3D;  document.querySelector(&quot;#btn&quot;)\n  btn.addEventListener(&#39;click&#39;,function()&#123;\n    &#x2F;&#x2F; 原生回调形式\n    &#x2F;&#x2F; setTimeout(() &#x3D;&gt; &#123;\n    &#x2F;&#x2F;   let n &#x3D; rand(1,100)\n    &#x2F;&#x2F;   if(n &lt;&#x3D; 30) &#123;\n    &#x2F;&#x2F;     console.log(n)\n    &#x2F;&#x2F;     alert(&quot;恭喜中奖&quot;)\n    &#x2F;&#x2F;   &#125; else &#123;\n    &#x2F;&#x2F;     console.log(n)\n    &#x2F;&#x2F;     alert(&quot;谢谢惠顾&quot;)\n    &#x2F;&#x2F;   &#125;\n    &#x2F;&#x2F; &#125;,2000)\n    &#x2F;&#x2F; promise形式 promise有两个参数 resolve 返回成功操作\n    &#x2F;&#x2F; reject 表示失败操作  它可以包裹异步操作并对其进行封装\n    let p &#x3D;  new Promise((resolve, reject) &#x3D;&gt; &#123;\n      setTimeout(() &#x3D;&gt; &#123;\n      let n &#x3D; rand(1,100)\n      if(n &lt;&#x3D; 30) &#123;\n        console.log(n)\n        resolve() &#x2F;&#x2F; 将promise对象的状态设置为成功\n      &#125; else &#123;\n        console.log(n)\n        reject() &#x2F;&#x2F; 将promise对象的状态设置为失败\n      &#125;\n    &#125;,1000)\n    &#125;) \n    p.then(() &#x3D;&gt;&#123;\n      alert(&quot;恭喜中奖&quot;)\n    &#125;, () &#x3D;&gt; &#123;\n      alert(&#39;谢谢惠顾&#39;)\n    &#125;)\n  &#125;)\n&lt;&#x2F;script&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>promise的状态是实例对象[PromiseState]的一个属性它有3种状态 </p>\n<p>初始状态&#x2F;未决定的  pending </p>\n<p>当执行结果为成功时状态为pending会变为fullfilled</p>\n<p>当执行结果失败时状态为pending会变为rejected</p>\n<p>一个promise对象只能改变一次无论变为成功还是失败都会返回一个数据结果</p>\n<p>成功数据结果一般称为value</p>\n<p>失败数据结果一般称为reason</p>\n<p>Promise对象的值是实例对象的另一个属性[PromiseResult] 保存成功和失败的结果</p>\n<p><img src=\"C:\\Users\\Administrator\\Downloads\\promise工作流程.png\"></p>\n<p>相关API</p>\n<p>promise构造函数: new Promise() 接收一个函数作为参数</p>\n<p>参数内部接收两个函数分别为 resolve(成功)  reject(失败) 它们分别执行失败和成功的回调</p>\n<p>Promise.protype.then方法 （’函数一’,’函数二’）&#x3D;&gt; {} </p>\n<p>指定用于得到一个成功或失败的回调返回一个新的promise对象</p>\n<p>Promise.protype.catch 方法 （）&#x3D;&gt; {}</p>\n<p>指定一个失败的回调</p>\n<p>Promise.resolve 方法 (value) &#x3D;&gt; {}</p>\n<p>传入的参数为非promise类型的对象,则返回的结果为成功的promise</p>\n<p>传入的参数为promise对象.则参数的结果决定了resolve的结果</p>\n<p>Promise.reject 方法() &#x3D;&gt; {}</p>\n<p>返回一个失败的promise对象</p>\n<p>Promise.all方法 ([]) &#x3D;&gt; {}</p>\n<p>包含n个promise数组 </p>\n<p>返回一个新的promise,只有所有的promise都成功才成功,只要失败了一个就直接失败</p>\n<p>Promise.race 方法 () &#x3D;&gt; {}</p>\n<p>包含n个promise的数组</p>\n<p>返回一个新的promise 第一个完成的promise的结果状态就是最终的结果状态</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">date: 2022&#x2F;08&#x2F;19 20:46:25</code></pre>\n\n<h5 id=\"如何修改promise状态\"><a href=\"#如何修改promise状态\" class=\"headerlink\" title=\"如何修改promise状态\"></a>如何修改promise状态</h5><ol>\n<li>使用resolve将promise状态转化为成功 fulfilled</li>\n<li>使用reject将promise状态转化为reject</li>\n<li>throw 抛出错误</li>\n</ol>\n<h5 id=\"一个promise指定多个成功-x2F-失败回调函数-都会调用吗\"><a href=\"#一个promise指定多个成功-x2F-失败回调函数-都会调用吗\" class=\"headerlink\" title=\"一个promise指定多个成功&#x2F;失败回调函数,都会调用吗\"></a>一个promise指定多个成功&#x2F;失败回调函数,都会调用吗</h5><p>当promise改变为对应状态时都会执行</p>\n<h5 id=\"改变promise状态和指定回调函数谁先谁后\"><a href=\"#改变promise状态和指定回调函数谁先谁后\" class=\"headerlink\" title=\"改变promise状态和指定回调函数谁先谁后\"></a>改变promise状态和指定回调函数谁先谁后</h5><p>都有可能,正常情况下是先指定回调再改变状态,但也可以先改变状态再指定回调</p>\n<p>如何先改变状态再指定回调</p>\n<ul>\n<li>再执行器中直接调用resolve或者reject</li>\n<li>延迟更长时间才调用then</li>\n</ul>\n<p>什么时候才能得到数据</p>\n<ul>\n<li>如果先指定回调,那当状态发生改变时,回调函数就会调用,得到数据</li>\n<li>如果先改变的状态,那当执行回调时,回调函数就会调用,得到数据</li>\n</ul>\n<h5 id=\"then方法返回结果由什么决定\"><a href=\"#then方法返回结果由什么决定\" class=\"headerlink\" title=\"then方法返回结果由什么决定\"></a>then方法返回结果由什么决定</h5><p>  由then()指定的回调函数执行的结果决定</p>\n<p>  如果抛出异常,新promise变为rejected,reason为抛出的异常</p>\n<p>  如果返回的是非promise的任意值,新promise变为resolved,value为返回值</p>\n<p>  如果返回的是另一个新的promise,此promise的结果就会成为新promise的结果</p>\n<h5 id=\"串联多个任务\"><a href=\"#串联多个任务\" class=\"headerlink\" title=\"串联多个任务\"></a>串联多个任务</h5><p>promise的then()返回一个新的promise,可以then()的链式调用</p>\n<p>通过then的链式调用串连多个同步或者异步任务</p>\n<h5 id=\"异常穿透\"><a href=\"#异常穿透\" class=\"headerlink\" title=\"异常穿透\"></a>异常穿透</h5><p>当使用promise的then链式调用时,可以在最后指定失败的回调</p>\n<p>前面任何操作出了异常,都会传递到最后的失败回调中</p>\n<h5 id=\"中断promise链\"><a href=\"#中断promise链\" class=\"headerlink\" title=\"中断promise链\"></a>中断promise链</h5><p>当使用promise的then链式调用时,在中间中断,不在调用后面的回调函数</p>\n<p>在回调函数中返回一个padding状态的promise对象</p>\n","text":"Promise的理解和使用 promise是一门新的技术(es6规范) promise是异步编程的新解决方案 从语法上来说:promise是一个构造函数 从功能上来说:promise对象用来封装异步操作并可以获取成功和失败的结果 promise: 启动异步任务 &#x3D;&gt...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"技术","slug":"技术","count":18,"path":"api/categories/技术.json"}],"tags":[{"name":"ES6","slug":"ES6","count":8,"path":"api/tags/ES6.json"},{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Promise%E7%9A%84%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Promise的理解和使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#promise%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">promise的优点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9promise%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">如何修改promise状态</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AApromise%E6%8C%87%E5%AE%9A%E5%A4%9A%E4%B8%AA%E6%88%90%E5%8A%9F-x2F-%E5%A4%B1%E8%B4%A5%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0-%E9%83%BD%E4%BC%9A%E8%B0%83%E7%94%A8%E5%90%97\"><span class=\"toc-text\">一个promise指定多个成功&#x2F;失败回调函数,都会调用吗</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%94%B9%E5%8F%98promise%E7%8A%B6%E6%80%81%E5%92%8C%E6%8C%87%E5%AE%9A%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E8%B0%81%E5%85%88%E8%B0%81%E5%90%8E\"><span class=\"toc-text\">改变promise状态和指定回调函数谁先谁后</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#then%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%94%B1%E4%BB%80%E4%B9%88%E5%86%B3%E5%AE%9A\"><span class=\"toc-text\">then方法返回结果由什么决定</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%B2%E8%81%94%E5%A4%9A%E4%B8%AA%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">串联多个任务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E7%A9%BF%E9%80%8F\"><span class=\"toc-text\">异常穿透</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%ADpromise%E9%93%BE\"><span class=\"toc-text\">中断promise链</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"小提琴","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我见青山多妩媚，料青山、见我应如是。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"VueRouter","uid":"5d40e7fe0c283422ee253e93aca4d4aa","slug":"VueRouter路由","date":"2022-05-16T12:46:25.000Z","updated":"2022-06-05T15:53:30.479Z","comments":true,"path":"api/articles/VueRouter路由.json","keywords":null,"cover":"static\\img\\20200401220041648.gif","text":"VueRouter路由vue 的一个插件库，专门用来实现SPA 应用 vue2中使用的是&#118;&#x75;&#x65;&#x2d;&#114;&#x6f;&#117;&#116;&#101;&#x72;&#x40;&#51;&#46;&#120; vue3中使用的是&#x7...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"技术","slug":"技术","count":18,"path":"api/categories/技术.json"}],"tags":[{"name":"Vue","slug":"Vue","count":3,"path":"api/tags/Vue.json"},{"name":"JavaScript","slug":"JavaScript","count":10,"path":"api/tags/JavaScript.json"}],"author":{"name":"小提琴","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我见青山多妩媚，料青山、见我应如是。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"git命令","uid":"e5c9682f958fbae18070afcafeff3ba8","slug":"git基础","date":"2022-05-15T12:46:25.000Z","updated":"2022-06-04T10:58:26.131Z","comments":true,"path":"api/articles/git基础.json","keywords":null,"cover":"static\\img\\photo-1571361656693-d7602246ce3c.jpg","text":"安装完git之后第一件是就是设置自己的用户名和邮箱地址git config --global user.name “用户名&quot; git config --global user.email &quot;邮箱&quot; 如果是使用了–global选项,那么命令只需要运行一...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"技术","slug":"技术","count":18,"path":"api/categories/技术.json"}],"tags":[{"name":"GIT","slug":"GIT","count":1,"path":"api/tags/GIT.json"}],"author":{"name":"小提琴","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我见青山多妩媚，料青山、见我应如是。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}