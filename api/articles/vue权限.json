{"title":"vue权限","uid":"172b888c0dcd8e362469b61e697dea6a","slug":"vue权限","date":"2022-06-12T13:21:42.000Z","updated":"2022-06-12T13:40:06.195Z","comments":true,"path":"api/articles/vue权限.json","keywords":null,"cover":"static\\img\\photo-1516166328576-82e16a127024.jpg","content":"<h2 id=\"vue权限\"><a href=\"#vue权限\" class=\"headerlink\" title=\"vue权限\"></a>vue权限</h2><h5 id=\"什么是权限\"><a href=\"#什么是权限\" class=\"headerlink\" title=\"什么是权限\"></a>什么是权限</h5><p>权限是对特定资源访问,也就是确保用户只能访问到被分配的资源</p>\n<p>前端发起的请求都会触发路由和视图</p>\n<p>可以从路由和视图方面进行控制</p>\n<ul>\n<li>路由方面:用户登录后只能看到自己有权访问的菜单导航</li>\n<li>视图方面: 用户只能看到自己有权浏览的内容和控件</li>\n</ul>\n<p>前端权限控制分为四个方面:</p>\n<ul>\n<li>接口权限</li>\n<li>按钮权限</li>\n<li>菜单权限</li>\n<li>路由权限</li>\n</ul>\n<h5 id=\"接口权限\"><a href=\"#接口权限\" class=\"headerlink\" title=\"接口权限\"></a>接口权限</h5><p>接口权限一般采用jwt的形式验证,没有通过的话返回401,跳转到登录页面重新登录</p>\n<p>登录完成拿到token,将token存起来通过axios请求拦截器进行拦截,每次请求的时候请求头携带token</p>\n<h5 id=\"菜单权限\"><a href=\"#菜单权限\" class=\"headerlink\" title=\"菜单权限\"></a>菜单权限</h5><p>菜单与路由分离,菜单由后端返回</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 引入vuex vue vuerouter 菜单接口\nimport Vue from &#39;vue&#39;\nimport VueRouter from &#39;vue-router&#39;\nimport &#123; getData &#125; from &#39;@&#x2F;utils&#x2F;api.js&#39;\nimport store from &#39;@&#x2F;store&#x2F;index.js&#39;\n&#x2F;&#x2F; 挂载到vue上\nVue.use(VueRouter)\n&#x2F;&#x2F; 定义路由配置\nconst routes &#x3D; [\n  &#123;\n    path: &#39;&#x2F;&#39;,\n    component: () &#x3D;&gt; import(&#x2F;* webpackChunkName: &quot;about&quot; *&#x2F; &#39;..&#x2F;views&#x2F;home.vue&#39;)\n  &#125;,\n]\n&#x2F;&#x2F; 动态生成数据\n&#x2F;&#x2F; arr.forEach(item &#x3D;&gt; &#123;\n&#x2F;&#x2F;   routes.push(&#123;\n&#x2F;&#x2F;     path: item.path,\n&#x2F;&#x2F;     name: item.name,\n&#x2F;&#x2F;     meta: &#123; title: item.title &#125;,\n&#x2F;&#x2F;     component: () &#x3D;&gt; import(&#96;..&#x2F;views&#x2F;rightMain&#x2F;content&#x2F;$&#123;item.component&#125;&#96;)\n&#x2F;&#x2F;   &#125;)\n&#x2F;&#x2F; &#125;)\n&#x2F;&#x2F; 声明路由器\nconst router &#x3D; new VueRouter(&#123;\n  routes\n&#125;)\n&#x2F;&#x2F;路由前置守卫\nrouter.beforeEach(async(to, from, next) &#x3D;&gt; &#123;\n  &#x2F;* 由于每次点击页面菜单是都会向后台发起请求\n    为减少页面开销,将登录成功后后端返回的路由菜单存在vuex缓存中\n    让页面点击时不用每次都请求一次,减少不必要的操作\n  *&#x2F;\n  &#x2F;&#x2F; 判断vuex是否存在数据 存在放行 不存在获取数据\n  if(store &amp;&amp; store.state.nav.length &#x3D;&#x3D;&#x3D; 0)&#123;\n  &#x2F;&#x2F; 获取数据\n  let &#123; menuData &#125;  &#x3D; await getData().then(res &#x3D;&gt; res.data.Data)\n  &#x2F;&#x2F; 数据缓存\n  store.dispatch(&#39;SETNAV&#39;,menuData)\n  &#x2F;&#x2F; 处理路由配置\n  let routerConfig &#x3D; addmyRoute(menuData)\n  &#x2F;&#x2F; 动态添加路由\n  router.addRoutes(routerConfig)\n  &#x2F;&#x2F; 进行跳转\n  next(&#123;path: to.path&#125;)\n  &#125; else &#123;\n    next()\n  &#125;\n&#125;)\nfunction addmyRoute(menuData)&#123;\n  console.log(menuData)\n  menuData.forEach(item &#x3D;&gt; &#123;\n  routes.push(&#123;\n    path: item.path,\n    name: item.name,\n    &#x2F;&#x2F; meta: &#123; title: item.title &#125;,\n    component: () &#x3D;&gt; import(&#x2F;* webpackChunkName: &quot;about&quot; *&#x2F; &#96;..&#x2F;views&#x2F;$&#123;item.component&#125;.vue&#96;)\n  &#125;)\n&#125;)\nreturn routes\n&#125;\nexport default router\n</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; vuex部分\nimport Vue from &#39;vue&#39;\nimport Vuex from &#39;vuex&#39;\n\nVue.use(Vuex)\n\nexport default new Vuex.Store(&#123;\n  state: &#123;\n    nav: []\n  &#125;,\n  getters:&#123;\n    navData: state &#x3D;&gt; state.nav\n  &#125;,\n  mutations: &#123;\n    SETNAV(state,data)&#123;\n      state.nav &#x3D; data\n    &#125;\n  &#125;,\n  actions: &#123;\n    SETNAV(&#123;commit&#125;, data)&#123;\n      commit(&#39;SETNAV&#39;,data)\n    &#125;\n  &#125;,\n  modules: &#123;\n  &#125;\n&#125;)\n---------------------------\n&#x2F;&#x2F; 当登录成功后可以将菜单存储在vuex中\nasync getNav()&#123;\n    let &#123; data &#125; &#x3D; await getData()\n      this.$store.dispatch(&#39;SETNAV&#39;,data.list)\n &#125;\n---------------------------\n&#x2F;&#x2F; 请求拦截器 响应拦截器\nimport axios from &#39;axios&#39;\naxios.defaults.baseURL &#x3D; &#39;http:&#x2F;&#x2F;localhost:9999&#x2F;&#39;\n&#x2F;&#x2F; 请求拦截器\naxios.interceptors.request.use(config &#x3D;&gt; config)\n&#x2F;&#x2F;响应拦截器\naxios.interceptors.response.use(res &#x3D;&gt; &#123;\n  return res\n&#125;, err &#x3D;&gt; &#123;\n  return Promise.reject(err)\n&#125;)\nexport default axios</code></pre>\n\n","feature":true,"text":"vue权限什么是权限权限是对特定资源访问,也就是确保用户只能访问到被分配的资源 前端发起的请求都会触发路由和视图 可以从路由和视图方面进行控制 路由方面:用户登录后只能看到自己有权访问的菜单导航 视图方面: 用户只能看到自己有权浏览的内容和控件 前端权限控制分为四个方面: 接口权...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"技术","slug":"技术","count":12,"path":"api/categories/技术.json"}],"tags":[{"name":"ES6","slug":"ES6","count":4,"path":"api/tags/ES6.json"},{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"vue","slug":"vue","count":3,"path":"api/tags/vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vue%E6%9D%83%E9%99%90\"><span class=\"toc-text\">vue权限</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%9D%83%E9%99%90\"><span class=\"toc-text\">什么是权限</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E6%9D%83%E9%99%90\"><span class=\"toc-text\">接口权限</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%8F%9C%E5%8D%95%E6%9D%83%E9%99%90\"><span class=\"toc-text\">菜单权限</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"小提琴","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我见青山多妩媚，料青山、见我应如是。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"小程序","uid":"cc519f18fc7027e7d44b9a0621d59e8e","slug":"小程序分享朋友圈功能","date":"2022-06-12T13:44:15.000Z","updated":"2022-06-12T13:44:51.721Z","comments":true,"path":"api/articles/小程序分享朋友圈功能.json","keywords":null,"cover":"static\\img\\photo-1571361656693-d7602246ce3c.jpg","text":"小程序分享朋友圈功能小程序页面默认不可被分享到朋友圈，开发者需主动设置“分享到朋友圈”。页面允许被分享到朋友圈，需满足两个条件： 首先，页面需设置允许“发送给朋友”。具体参考 Page.onShareAppMessage 接口文档 满足条件 1 后，页面需设置允许“分享到朋友圈”...","link":"","photos":[],"count_time":{"symbolsCount":783,"symbolsTime":"1 mins."},"categories":[{"name":"技术","slug":"技术","count":12,"path":"api/categories/技术.json"}],"tags":[{"name":"小程序","slug":"小程序","count":1,"path":"api/tags/小程序.json"}],"author":{"name":"小提琴","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我见青山多妩媚，料青山、见我应如是。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Vue自定义指令","uid":"8c91c7fcf700c42b838e9d1e512a6e9a","slug":"Vue自定义指令","date":"2022-06-12T13:21:42.000Z","updated":"2022-06-12T13:46:00.948Z","comments":true,"path":"api/articles/Vue自定义指令.json","keywords":null,"cover":"static\\img\\photo-1516166328576-82e16a127024.jpg","text":"Vue自定义指令Vue自定义指令有全局注册和局部注册两种方式 全局注册通过Vue.directive(id,[definition]) 局部注册通过directives注册指令 &#x2F;&#x2F; 全局注册 &#x2F;&#x2F; src&#x2F;main.js imp...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"技术","slug":"技术","count":12,"path":"api/categories/技术.json"}],"tags":[{"name":"ES6","slug":"ES6","count":4,"path":"api/tags/ES6.json"},{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"vue","slug":"vue","count":3,"path":"api/tags/vue.json"}],"author":{"name":"小提琴","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我见青山多妩媚，料青山、见我应如是。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}