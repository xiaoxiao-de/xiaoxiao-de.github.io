{"title":"Vue状态管理","uid":"32bd86f22c17318130c6bcbe5d782d40","slug":"Vue状态管理","date":"2022-05-13T12:46:25.000Z","updated":"2022-10-31T15:08:32.253Z","comments":true,"path":"api/articles/Vue状态管理.json","keywords":null,"cover":"static\\img\\photo-1571361656693-d7602246ce3c.jpg","content":"<h3 id=\"Vue状态管理\"><a href=\"#Vue状态管理\" class=\"headerlink\" title=\"Vue状态管理\"></a>Vue状态管理</h3><p>vuex是专门在 Vue 中实现集中式状态管理的一个 Vue 插件,对 vue 应用中多个组件的共享状态进行集中式的管理,也是一种组件间通信的方式，且适用于任意组件间通信。</p>\n<p>pinia是vuex的替代者,是一个全新的状态管理工具,它支持ts,体积很小,轻量级,适用于中小型项目</p>\n<p>它们适用于：多个组件依赖同一状态, 来自不同组件的行为需要变更同一状态等等场景</p>\n<h5 id=\"Vuex的基本使用\"><a href=\"#Vuex的基本使用\" class=\"headerlink\" title=\"Vuex的基本使用\"></a>Vuex的基本使用</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">vuex拥有4个核心属性和一个模块管理属性\nstate: 用于存放数据 只能通过 mutations进行修改\nmutations: 用于修改state里面的数据\nactions: 异步处理数据逻辑,需要提交到mutations修改\ngetters: 类似于计算属性,对state进行计算处理操作\nmodules: 当管理的状态过多时,将它们细分成模块,然后再主文件中引用\n若没有网络请求或其他业务逻辑，组件中也可以越过&#96;actions&#96;，即不写&#96;dispatch&#96;，直接编写commit&#96;\n\n&#x2F;&#x2F; 基本结构  引入Vue核心库\nimport Vue from &#39;vue&#39;\n&#x2F;&#x2F;引入Vuex\nimport Vuex from &#39;vuex&#39;\n&#x2F;&#x2F;应用Vuex插件\nVue.use(Vuex)\n\n&#x2F;&#x2F;准备actions对象——响应组件中用户的动作、处理业务逻辑\nconst actions &#x3D; &#123;&#125;\n&#x2F;&#x2F;准备mutations对象——修改state中的数据\nconst mutations &#x3D; &#123;&#125;\n&#x2F;&#x2F;准备state对象——保存具体的数据\nconst state &#x3D; &#123;&#125;\n&#x2F;&#x2F; 准备modules模块\nconst modules &#x3D; &#123;&#125;\n&#x2F;&#x2F; 准备getters模块\nconst modules &#x3D; &#123;&#125;\n&#x2F;&#x2F;创建并暴露store\nexport default new Vuex.Store(&#123;\n   \tactions,\n   \tmutations,\n   \tstate,\n   \tgetters,\n   \tmodules\n&#125;)\n\n\n&#x2F;&#x2F; modules管理方式 \n&#x2F;&#x2F; 把其余模块引入后再暴露出去\nimport Vue from &quot;vue&quot;\nimport Vuex from &quot;vuex&quot;\nimport count from &#39;.&#x2F;count.js&#39;\nimport condition from &#39;.&#x2F;condition.js&#39;\nimport user from &#39;.&#x2F;user.js&#39;\nVue.use(Vuex)\nconst store &#x3D; new Vuex.Store(&#123;\n  modules: &#123;\n    condition,\n    count,\n\tuser,\n  &#125;\n&#125;)\nexport default store\n\n&#x2F;&#x2F; condition 模块\nexport default &#123;\n  state() &#123;\n    return &#123;\n\t  cond: &#123;\n\t  \tbcid:1\n\t   &#125;,\n\t&#125;\n  &#125;,\n  mutations: &#123;\n    changeCondition(state,obj)&#123;\n\t  state.cond &#x3D; obj\n\t&#125;\n  &#125;\n&#125;\n&#x2F;&#x2F; user模块\nexport default &#123;\n  namespaced:true, &#x2F;&#x2F; 开启命名空间\n  state()&#123;\n\t  return &#123;\n\t    userInfo: null\n\t  &#125;\n  &#125;,\n  mutations: &#123;\n    initInfo(state,info)&#123;\n\t  state.userInfo &#x3D; info\n\t  &#125;\n  &#125;,\n  actions: &#123;\n    userLoginAct(context,info)&#123;\n\t  $http(&#39;&#x2F;1.1&#x2F;login&#39;,&quot;POST&quot;,info).then( res &#x3D;&gt; &#123;\n\t    console.log(res)\n\t\tlet &#123; code &#125; &#x3D; res\n\t\tif(code) &#123;\n\t\t  let title &#x3D; code &#x3D;&#x3D;&#x3D; 211 ? &#39;账号不存在&#39; : &#39;密码错误&#39;\n\t\t  uni.showToast(&#123;\n\t\t    title: title,\n\t\t\ticon: &#39;none&#39;\n\t\t  &#125;)\n\t\t  return\n\t\t&#125;\n\t\tcontext.commit(&#39;initInfo&#39;,res)\n\t\tuni.setStorage(&#123;\n\t\t  \tkey: &#39;userInfo&#39;,\n\t\t\tdata: res\n\t\t  &#125;)\n\t\t  uni.navigateBack(&#123;\n\t\t  \tdelta:1\n\t\t  &#125;)\n\t  &#125;) \n\t&#125;\n  &#125;\n&#125;</code></pre>\n\n<h5 id=\"vuex的引用方式\"><a href=\"#vuex的引用方式\" class=\"headerlink\" title=\"vuex的引用方式\"></a>vuex的引用方式</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; modules管理的使用方式 \n将模块的命名空间namespaced开启设置为true\n引入辅助函数: mapState, mapGetters, mapActions, mapMutations\n使用方式:\nmapState和mapGetters在计算属性中使用\ncomputed: &#123;\n    &#x2F;&#x2F;借助mapState生成计算属性：sum、school、subject（对象写法）\n     ...mapState(&#123;sum:&#39;sum&#39;,school:&#39;school&#39;,subject:&#39;subject&#39;&#125;),\n    &#x2F;&#x2F;借助mapState生成计算属性：sum、school、subject（数组写法）\n    ...mapState([&#39;sum&#39;,&#39;school&#39;,&#39;subject&#39;]),\n       &#x2F;&#x2F;借助mapGetters生成计算属性：bigSum（对象写法）\n    ...mapGetters(&#123;bigSum:&#39;bigSum&#39;&#125;),\n    &#x2F;&#x2F;借助mapGetters生成计算属性：bigSum（数组写法）\n    ...mapGetters([&#39;bigSum&#39;])\n&#125;,\nmapActions和mapMutations在方法中使用\nmethods:&#123;\n    &#x2F;&#x2F;靠mapActions生成：incrementOdd、incrementWait（对象形式）\n    ...mapActions(&#123;incrementOdd:&#39;jiaOdd&#39;,incrementWait:&#39;jiaWait&#39;&#125;)\n    &#x2F;&#x2F;靠mapActions生成：incrementOdd、incrementWait（数组形式）\n    ...mapActions([&#39;jiaOdd&#39;,&#39;jiaWait&#39;])\n    &#x2F;&#x2F;靠mapMutations生成：increment、decrement（对象形式）\n    ...mapMutations(&#123;increment:&#39;JIA&#39;,decrement:&#39;JIAN&#39;&#125;),\n    &#x2F;&#x2F;靠mapMutations生成：JIA、JIAN（对象形式）\n    ...mapMutations([&#39;JIA&#39;,&#39;JIAN&#39;]),\n&#125;\n或者通过: $store.state.&quot;数据名&quot; \n$store.dispatch(&#39;actions的方法名&#39;,数据) \n$store.commit(&quot;mutations中的方法名&quot;,数据)\n$store.getters.&quot;数据&quot;</code></pre>\n\n<h5 id=\"pinia的基本使用\"><a href=\"#pinia的基本使用\" class=\"headerlink\" title=\"pinia的基本使用\"></a>pinia的基本使用</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 模块化使用ts版本\n&#x2F;&#x2F; index.ts\nimport &#123; useTestStore &#125; from &#39;.&#x2F;user&#39;\nimport &#123; userInfo &#125; from &#39;.&#x2F;count&#39;\nexport default function useStore():any &#123;\n   return &#123;\n    count: useTestStore(),\n    user: userInfo()\n   &#125;\n&#125;\n&#x2F;&#x2F; count.ts\nimport &#123;defineStore &#125; from &#39;pinia&#39;\n\nconst enum users &#123;\n  User &#x3D; &#39;USERS&#39;\n&#125;\nexport const userInfo &#x3D; defineStore(users.User, &#123;\n   state: () &#x3D;&gt; &#123;\n      return &#123;\n        name: &#39;张三&#39;\n      &#125;\n   &#125;,\n   getters: &#123;\n\n   &#125;,\n   actions: &#123;\n\n   &#125;\n&#125;) \n&#x2F;&#x2F; user.ts\nimport &#123; defineStore &#125; from &quot;pinia&quot;\nconst enum Names &#123;\n  Test &#x3D; &#39;TEST&#39;\n&#125;\n&#x2F;&#x2F; 接收两个参数 id 具有唯一性\nexport const useTestStore &#x3D; defineStore(Names.Test, &#123;\n  state:()&#x3D;&gt;&#123;\n    return &#123;\n      current: 1\n    &#125;\n  &#125;,\n  getters: &#123;\n    title()&#123;\n      return this.current + &#39;武松打虎就&#39;\n    &#125;\n  &#125;,\n  actions: &#123;\n    increment (n) &#123;\n      this.current+&#x3D;n\n    &#125;,\n    randomizeCount () &#123;\n      this.current &#x3D; Math.round(100 * Math.random())\n    &#125;\n  &#125;\n&#125;)</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 模块化使用\n&#x2F;&#x2F; index.js引入后统一暴露\nimport user from &#39;.&#x2F;user.js&#39;\n\nexport default function useStore() &#123;\n  return &#123;\n     user: user()\n  &#125;\n&#125;\n&#x2F;&#x2F; user.js模块\nimport &#123; defineStore &#125; from &#39;pinia&#39;\nconst user &#x3D; defineStore(&#39;user&#39;,&#123;\n  state: () &#x3D;&gt; &#123;\n\n  &#125;,\n  actions: &#123;\n    \n  &#125;,\n  persist: &#123;\n    enabled: true\n  &#125;\n&#125;)\nexport default user</code></pre>\n\n","text":"Vue状态管理vuex是专门在 Vue 中实现集中式状态管理的一个 Vue 插件,对 vue 应用中多个组件的共享状态进行集中式的管理,也是一种组件间通信的方式，且适用于任意组件间通信。 pinia是vuex的替代者,是一个全新的状态管理工具,它支持ts,体积很小,轻量级,适用于...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"技术","slug":"技术","count":21,"path":"api/categories/技术.json"}],"tags":[{"name":"Vue","slug":"Vue","count":4,"path":"api/tags/Vue.json"},{"name":"JavaScript","slug":"JavaScript","count":11,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">Vue状态管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Vuex%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Vuex的基本使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#vuex%E7%9A%84%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">vuex的引用方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#pinia%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">pinia的基本使用</span></a></li></ol></li></ol></li></ol>","author":{"name":"小提琴","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我见青山多妩媚，料青山、见我应如是。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"git总结","uid":"17187898c0b5119ee835799c3aeb156a","slug":"git总结","date":"2022-05-15T12:46:25.000Z","updated":"2022-10-31T08:46:20.314Z","comments":true,"path":"api/articles/git总结.json","keywords":null,"cover":"static\\img\\photo-1571361656693-d7602246ce3c.jpg","text":"git总结git是什么工具，起到了什么作用? 版本控制工具, 代码管理, 版本控制 将本地代码以文件提交到远程厂库全局设置： git config --global user.name &quot;lqs&quot; git config --global user.email ...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"技术","slug":"技术","count":21,"path":"api/categories/技术.json"}],"tags":[{"name":"GIT","slug":"GIT","count":2,"path":"api/tags/GIT.json"}],"author":{"name":"小提琴","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我见青山多妩媚，料青山、见我应如是。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}